%% PROTOCOL: NSPK: Needham-Schroeder Public-Key Protocol
%% VARIANT: original version (of 1978) without key server
%% PURPOSE: Two-party mutual autentication
%% ALICE_BOB:
%% 1. A  - {Na.A}_PKb ----> B
%% 2. A <- {Na.Nb}_PKa ---  B
%% 3. A  - {Nb}_PKb ------> B
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% définition du rôle alice, initiant le protocole
role client (C, S: agent,             
            PKs, PKc: public_key,
	    IdVideo, IdC: protocol_id,
	    MdpC: text,	
	    H: hash_func,     
            SND, RCV: channel(dy)) 

played_by C def=

  local State: nat, 
 	ClefSession: symmetric_key,
	LienVideo: text
  init State:=0

  transition  
   
    0.  State=0 /\ RCV(start) =|> 
	State':=1 /\ SND({IdC.MdpC}_PKs) 

    2.  State=1 /\ RCV({ClefSession'}_PKc) =|> 
	State':=2 /\ SND({IdVideo}_ClefSession') 

    4.  State=2 /\ RCV({IdVideo.LienVideo'}_ClefSession) =|> 
	State':=3 /\ SND({ok.H(LienVideo)}_ClefSession) 

end role

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% role bob à écrire

role serveur (C, S: agent,             
            PKs, PKc: public_key, 
	    IdVideo, IdC: protocol_id,
	    MdpC, LienVideo: text,
	    H:hash_func,   
            SND, RCV: channel(dy)) 
played_by S def=

  local State: nat,
	ClefSession: symmetric_key

  init State:=0

  transition  

    1.  State=0 /\ RCV({IdC.MdpC}_PKs) =|> 
	State':=1 /\ ClefSession':=new() /\ secret(ClefSession',clefsession,{C,S}) /\ SND({ClefSession'}_PKc)

    3.  State=1 /\ RCV({IdVideo}_ClefSession) =|> 
	State':=2 /\ SND({IdVideo.LienVideo}_ClefSession)

end role

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% définition du rôle caractérisant une session
role session(C, S: agent, PKc, PKs: public_key, IdVideo, IdC: protocol_id, MdpC, LienVideo: text, H: hash_func) 
def=

  local SS, RS, SC, RC: channel(dy)

  composition 

	client(C,S,PKc,PKs,IdVideo, IdC, MdpC, H,SC,RC)
     /\ serveur(C,S,PKc,PKs,IdVideo, IdC, MdpC,LienVideo,H,SS,RS)
 
end role

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% définition du rôle caractérisant le scenario à exécuter
role environment() def=

    const s , c: agent,
	  pks, pkc, pki: public_key,
	  idvideo: protocol_id,
	  idc: protocol_id,
	  clefsession: protocol_id,
	  h: hash_func,
	  mdp, lienvideo: text,
	  ok: nat
    intruder_knowledge = {c, s, pks, pkc, pki, idc, inv(pki), h, idvideo}

    composition

	session(c, s, pkc, pks, idvideo, idc, mdp, lienvideo, h) /\
	session(c, i, pkc, pki, idvideo, idc, mdp, lienvideo, h) /\
	session(i, s, pki, pks, idvideo, idc, mdp, lienvideo, h)
end role

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% pour l'instant, pas de section goal ici (donc pas de propriété à vérifier)
goal
	secrecy_of mdp
	secrecy_of lienvideo
	secrecy_of clefsession
	
end goal

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% lancement du rôle principal
environment()
