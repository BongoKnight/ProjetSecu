%% IF specification of calp-v3.hlpsl

section signature:

state_serveur: agent * agent * protocol_id * protocol_id * protocol_id * protocol_id * text * public_key * public_key * hash_func * nat * symmetric_key * set(agent) * set(agent) * set(agent) * nat -> fact
state_badgeuse: agent * agent * protocol_id * protocol_id * protocol_id * protocol_id * public_key * public_key * hash_func * nat * text * symmetric_key * set(agent) * nat -> fact


section types:

MGoal, start: message
Dummy_ClefSession, dummy_sk, ClefSession: symmetric_key
Dummy_Action, dummy_nonce, action, Action: text
h, H: hash_func
pks, pkb, pki, PKb, PKs: public_key
idemployei, idbadgeuse, typeaction, act, idserveur, sessionkey, IdEmploye, IdBadgeuse, IdServeur, TypeAction, serveur_badgeuse, badgeuse_serveur, idemploye: protocol_id
4, SID, Dummy_State, 3, SID2, SID1, State, ok, 2, 1, 0, 13, 10, 6: nat
set_97, set_96, set_95, set_86, set_116, set_115, set_114, set_113, set_111, set_110, set_109, set_108, set_107, set_106, set_105, set_103: set
A2Goal, A1Goal, b, s, B, S, i: agent
Dummy_Set_48, Dummy_Set_23, ASGoal, Set_52, Set_50, Set_48, Set_23, Dummy_Set_52, Dummy_Set_50: set(agent)


section inits:

initial_state init1 := 
 iknows(start).
 iknows(b).
 iknows(s).
 iknows(pkb).
 iknows(pks).
 iknows(pki).
 iknows(inv(pki)).
 iknows(h).
 iknows(typeaction).
 iknows(idemployei).
 iknows(i).
 state_badgeuse(b,s,idemploye,idbadgeuse,idserveur,typeaction,pkb,pks,h,0,dummy_nonce,dummy_sk,set_86,3).
 state_serveur(s,b,idemploye,idbadgeuse,idserveur,typeaction,action,pks,pkb,h,0,dummy_sk,set_95,set_96,set_97,4).
 state_badgeuse(b,i,idemploye,idbadgeuse,idserveur,typeaction,pki,pkb,h,0,dummy_nonce,dummy_sk,set_103,6).
 state_serveur(s,i,idemploye,idserveur,idbadgeuse,typeaction,action,pki,pks,h,0,dummy_sk,set_109,set_110,set_111,10).
 state_serveur(s,i,idemployei,idserveur,idbadgeuse,typeaction,action,pki,pks,h,0,dummy_sk,set_114,set_115,set_116,13)


section rules:

step step_0 (B,S,IdEmploye,IdBadgeuse,IdServeur,TypeAction,PKb,PKs,H,Action,ClefSession,Dummy_Set_23,SID) :=
 state_badgeuse(B,S,IdEmploye,IdBadgeuse,IdServeur,TypeAction,PKb,PKs,H,0,Action,ClefSession,Dummy_Set_23,SID).
 iknows(start)
 =>
 state_badgeuse(B,S,IdEmploye,IdBadgeuse,IdServeur,TypeAction,PKb,PKs,H,1,Action,ClefSession,Dummy_Set_23,SID).
 iknows(crypt(PKs,pair(IdEmploye,IdBadgeuse))).
 secret(IdEmploye,idemploye,Dummy_Set_23).
 witness(B,S,badgeuse_serveur,pair(IdEmploye,IdBadgeuse)).
 contains(B,Dummy_Set_23).
 contains(S,Dummy_Set_23)

step step_1 (B,S,IdEmploye,IdBadgeuse,IdServeur,TypeAction,PKb,PKs,H,Action,Dummy_ClefSession,Set_23,SID,ClefSession) :=
 state_badgeuse(B,S,IdEmploye,IdBadgeuse,IdServeur,TypeAction,PKb,PKs,H,1,Action,Dummy_ClefSession,Set_23,SID).
 iknows(crypt(PKb,pair(ClefSession,IdServeur)))
 =>
 state_badgeuse(B,S,IdEmploye,IdBadgeuse,IdServeur,TypeAction,PKb,PKs,H,2,Action,ClefSession,Set_23,SID).
 iknows(scrypt(Dummy_ClefSession,TypeAction))

step step_2 (B,S,IdEmploye,IdBadgeuse,IdServeur,TypeAction,PKb,PKs,H,Dummy_Action,ClefSession,Set_23,SID,Action) :=
 state_badgeuse(B,S,IdEmploye,IdBadgeuse,IdServeur,TypeAction,PKb,PKs,H,2,Dummy_Action,ClefSession,Set_23,SID).
 iknows(scrypt(ClefSession,pair(TypeAction,Action)))
 =>
 state_badgeuse(B,S,IdEmploye,IdBadgeuse,IdServeur,TypeAction,PKb,PKs,H,3,Action,ClefSession,Set_23,SID).
 iknows(scrypt(ClefSession,pair(ok,apply(H,Action)))).
 request(B,S,serveur_badgeuse,pair(IdEmploye,IdBadgeuse),SID)

step step_3 (S,B,IdEmploye,IdBadgeuse,IdServeur,TypeAction,Action,PKb,PKs,H,Dummy_ClefSession,Dummy_Set_48,Dummy_Set_50,Set_52,SID,ClefSession) :=
 state_serveur(S,B,IdEmploye,IdBadgeuse,IdServeur,TypeAction,Action,PKb,PKs,H,0,Dummy_ClefSession,Dummy_Set_48,Dummy_Set_50,Set_52,SID).
 iknows(crypt(PKs,pair(IdEmploye,IdBadgeuse)))
=[exists ClefSession]=>
 state_serveur(S,B,IdEmploye,IdBadgeuse,IdServeur,TypeAction,Action,PKb,PKs,H,1,ClefSession,Dummy_Set_48,Dummy_Set_50,Set_52,SID).
 secret(ClefSession,sessionkey,Dummy_Set_48).
 iknows(crypt(PKb,pair(Dummy_ClefSession,IdServeur))).
 secret(IdServeur,idserveur,Dummy_Set_50).
 witness(S,B,serveur_badgeuse,pair(IdEmploye,IdBadgeuse)).
 contains(B,Dummy_Set_48).
 contains(S,Dummy_Set_48).
 contains(B,Dummy_Set_50).
 contains(S,Dummy_Set_50)

step step_4 (S,B,IdEmploye,IdBadgeuse,IdServeur,TypeAction,Action,PKb,PKs,H,ClefSession,Set_48,Set_50,Dummy_Set_52,SID) :=
 state_serveur(S,B,IdEmploye,IdBadgeuse,IdServeur,TypeAction,Action,PKb,PKs,H,1,ClefSession,Set_48,Set_50,Dummy_Set_52,SID).
 iknows(scrypt(ClefSession,TypeAction))
 =>
 state_serveur(S,B,IdEmploye,IdBadgeuse,IdServeur,TypeAction,Action,PKb,PKs,H,2,ClefSession,Set_48,Set_50,Dummy_Set_52,SID).
 iknows(scrypt(ClefSession,pair(TypeAction,Action))).
 secret(Action,act,Dummy_Set_52).
 contains(B,Dummy_Set_52).
 contains(S,Dummy_Set_52)

step step_5 (S,B,IdEmploye,IdBadgeuse,IdServeur,TypeAction,Action,PKb,PKs,H,ClefSession,Set_48,Set_50,Set_52,SID) :=
 state_serveur(S,B,IdEmploye,IdBadgeuse,IdServeur,TypeAction,Action,PKb,PKs,H,2,ClefSession,Set_48,Set_50,Set_52,SID).
 iknows(scrypt(ClefSession,pair(ok,apply(H,Action))))
 =>
 state_serveur(S,B,IdEmploye,IdBadgeuse,IdServeur,TypeAction,Action,PKb,PKs,H,3,ClefSession,Set_48,Set_50,Set_52,SID).
 request(S,B,serveur_badgeuse,pair(IdEmploye,IdBadgeuse),SID)


section properties:

property secrecy_of_sessionkey (MGoal,ASGoal) :=
 [] ((secret(MGoal,sessionkey,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property secrecy_of_act (MGoal,ASGoal) :=
 [] ((secret(MGoal,act,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property secrecy_of_idemploye (MGoal,ASGoal) :=
 [] ((secret(MGoal,idemploye,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property secrecy_of_idserveur (MGoal,ASGoal) :=
 [] ((secret(MGoal,idserveur,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property authentication_on_badgeuse_serveur (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,badgeuse_serveur,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,badgeuse_serveur,MGoal))
     /\ ((request(A1Goal,A2Goal,badgeuse_serveur,MGoal,SID1)
           /\ request(A1Goal,A2Goal,badgeuse_serveur,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))

property authentication_on_serveur_badgeuse (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,serveur_badgeuse,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,serveur_badgeuse,MGoal))
     /\ ((request(A1Goal,A2Goal,serveur_badgeuse,MGoal,SID1)
           /\ request(A1Goal,A2Goal,serveur_badgeuse,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))


section attack_states:

attack_state secrecy_of_sessionkey (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,sessionkey,ASGoal) &
 not(contains(i,ASGoal))

attack_state secrecy_of_act (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,act,ASGoal) &
 not(contains(i,ASGoal))

attack_state secrecy_of_idemploye (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,idemploye,ASGoal) &
 not(contains(i,ASGoal))

attack_state secrecy_of_idserveur (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,idserveur,ASGoal) &
 not(contains(i,ASGoal))

attack_state authentication_on_badgeuse_serveur (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,badgeuse_serveur,MGoal,SID) &
 not(witness(A2Goal,A1Goal,badgeuse_serveur,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_badgeuse_serveur (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,badgeuse_serveur,MGoal,SID1).
 request(A1Goal,A2Goal,badgeuse_serveur,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))

attack_state authentication_on_serveur_badgeuse (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,serveur_badgeuse,MGoal,SID) &
 not(witness(A2Goal,A1Goal,serveur_badgeuse,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_serveur_badgeuse (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,serveur_badgeuse,MGoal,SID1).
 request(A1Goal,A2Goal,serveur_badgeuse,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))

