%% IF specification of calp-v2.hlpsl

section signature:

state_serveur: agent * agent * protocol_id * protocol_id * public_key * public_key * nat * text * text * set(agent) * nat -> fact
state_badgeuse: agent * agent * protocol_id * protocol_id * public_key * public_key * nat * text * text * set(agent) * set(agent) * nat -> fact


section types:

set_85, set_84, set_83, set_79, set_70, set_69: set
Nb, Ns, Dummy_Ns, Dummy_Nb, dummy_nonce: text
State, 7, 4, SID, ok, 2, Dummy_State, 3, 1, SID2, SID1, 0: nat
Set_43, Dummy_Set_43, Dummy_Set_23, Dummy_Set_20, Set_23, Set_20, ASGoal: set(agent)
start, MGoal: message
PKb, PKs, pks, pkb, pki: public_key
ns, IdEmploye, IdBadgeuse, serveur_badgeuse, badgeuse_serveur, nb, idemploye, idbadgeuse: protocol_id
B, S, A2Goal, A1Goal, b, s, i: agent


section inits:

initial_state init1 := 
 iknows(start).
 iknows(b).
 iknows(s).
 iknows(pkb).
 iknows(pks).
 iknows(pki).
 iknows(inv(pki)).
 iknows(i).
 state_badgeuse(b,s,idemploye,idbadgeuse,pkb,pks,0,dummy_nonce,dummy_nonce,set_69,set_70,3).
 state_serveur(s,b,idemploye,idbadgeuse,pkb,pks,0,dummy_nonce,dummy_nonce,set_79,4).
 state_serveur(s,i,idemploye,idbadgeuse,pki,pks,0,dummy_nonce,dummy_nonce,set_85,7)


section rules:

step step_0 (B,S,IdEmploye,IdBadgeuse,PKb,PKs,Dummy_Nb,Ns,Dummy_Set_20,Dummy_Set_23,SID,Nb) :=
 state_badgeuse(B,S,IdEmploye,IdBadgeuse,PKb,PKs,0,Dummy_Nb,Ns,Dummy_Set_20,Dummy_Set_23,SID).
 iknows(start)
=[exists Nb]=>
 state_badgeuse(B,S,IdEmploye,IdBadgeuse,PKb,PKs,1,Nb,Ns,Dummy_Set_20,Dummy_Set_23,SID).
 iknows(crypt(PKs,pair(IdEmploye,pair(IdBadgeuse,Nb)))).
 secret(IdEmploye,idemploye,Dummy_Set_20).
 secret(Nb,nb,Dummy_Set_23).
 witness(B,S,badgeuse_serveur,Nb).
 contains(B,Dummy_Set_20).
 contains(S,Dummy_Set_20).
 contains(B,Dummy_Set_23).
 contains(S,Dummy_Set_23)

step step_1 (B,S,IdEmploye,IdBadgeuse,PKb,PKs,Nb,Dummy_Ns,Set_20,Set_23,SID,Ns) :=
 state_badgeuse(B,S,IdEmploye,IdBadgeuse,PKb,PKs,1,Nb,Dummy_Ns,Set_20,Set_23,SID).
 iknows(crypt(PKb,pair(ok,pair(Nb,Ns))))
 =>
 state_badgeuse(B,S,IdEmploye,IdBadgeuse,PKb,PKs,2,Nb,Ns,Set_20,Set_23,SID).
 iknows(crypt(PKs,pair(ok,Ns))).
 request(B,S,serveur_badgeuse,Ns,SID)

step step_2 (S,B,IdEmploye,IdBadgeuse,PKb,PKs,Dummy_Nb,Dummy_Ns,Dummy_Set_43,SID,Nb,Ns) :=
 state_serveur(S,B,IdEmploye,IdBadgeuse,PKb,PKs,0,Dummy_Nb,Dummy_Ns,Dummy_Set_43,SID).
 iknows(crypt(PKs,pair(IdEmploye,pair(IdBadgeuse,Nb))))
=[exists Ns]=>
 state_serveur(S,B,IdEmploye,IdBadgeuse,PKb,PKs,1,Nb,Ns,Dummy_Set_43,SID).
 iknows(crypt(PKb,pair(ok,pair(Nb,Ns)))).
 secret(Ns,ns,Dummy_Set_43).
 witness(S,B,serveur_badgeuse,Ns).
 contains(S,Dummy_Set_43).
 contains(B,Dummy_Set_43)


section properties:

property secrecy_of_nb (MGoal,ASGoal) :=
 [] ((secret(MGoal,nb,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property secrecy_of_ns (MGoal,ASGoal) :=
 [] ((secret(MGoal,ns,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property secrecy_of_idemploye (MGoal,ASGoal) :=
 [] ((secret(MGoal,idemploye,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property authentication_on_badgeuse_serveur (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,badgeuse_serveur,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,badgeuse_serveur,MGoal))
     /\ ((request(A1Goal,A2Goal,badgeuse_serveur,MGoal,SID1)
           /\ request(A1Goal,A2Goal,badgeuse_serveur,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))

property authentication_on_serveur_badgeuse (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,serveur_badgeuse,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,serveur_badgeuse,MGoal))
     /\ ((request(A1Goal,A2Goal,serveur_badgeuse,MGoal,SID1)
           /\ request(A1Goal,A2Goal,serveur_badgeuse,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))


section attack_states:

attack_state secrecy_of_nb (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,nb,ASGoal) &
 not(contains(i,ASGoal))

attack_state secrecy_of_ns (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,ns,ASGoal) &
 not(contains(i,ASGoal))

attack_state secrecy_of_idemploye (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,idemploye,ASGoal) &
 not(contains(i,ASGoal))

attack_state authentication_on_badgeuse_serveur (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,badgeuse_serveur,MGoal,SID) &
 not(witness(A2Goal,A1Goal,badgeuse_serveur,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_badgeuse_serveur (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,badgeuse_serveur,MGoal,SID1).
 request(A1Goal,A2Goal,badgeuse_serveur,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))

attack_state authentication_on_serveur_badgeuse (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,serveur_badgeuse,MGoal,SID) &
 not(witness(A2Goal,A1Goal,serveur_badgeuse,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_serveur_badgeuse (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,serveur_badgeuse,MGoal,SID1).
 request(A1Goal,A2Goal,serveur_badgeuse,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))

